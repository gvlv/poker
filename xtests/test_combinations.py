import pytest

from core.card import Card
from features.combinations import Combination, ReadyCombinationType, DrawCombinationType


@pytest.mark.parametrize(
    "test_input, expected",
    [(Combination([Card('D', '3'), Card('C', 'J'), Card('H', '4')],
                  [Card('D', 'J'), Card('C', '7')]),
      ReadyCombinationType.ONE_PAIR),
     (Combination([Card('H', '2'), Card('C', 'J'), Card('S', 'Q'), Card('S', 'K')],
                  [Card('H', 'K'), Card('H', '3')]),
      ReadyCombinationType.ONE_PAIR),
     (Combination([Card('H', '2'), Card('H', '5'), Card('H', '4'), Card('C', 'K'), Card('D', '3')],
                  [Card('C', 'J'), Card('C', '5')]),
      ReadyCombinationType.ONE_PAIR),
     (Combination([Card('S', '6'), Card('H', '5'), Card('D', 'J')],
                  [Card('D', '5'), Card('C', '6')]),
      ReadyCombinationType.TWO_PAIR),
     (Combination([Card('C', 'K'), Card('H', '8'), Card('S', '7'), Card('D', 'Q')],
                  [Card('H', 'K'), Card('D', '8')]),
      ReadyCombinationType.TWO_PAIR),
     (Combination([Card('H', '2'), Card('H', 'T'), Card('C', '4'), Card('D', '8'), Card('S', 'J')],
                  [Card('C', '2'), Card('D', 'J')]),
      ReadyCombinationType.TWO_PAIR),
     (Combination([Card('S', 'A'), Card('D', 'K'), Card('S', '7')],
                  [Card('H', '7'), Card('C', '7')]),
      ReadyCombinationType.THREE_OF_A_KIND),
     (Combination([Card('D', 'K'), Card('S', '3'), Card('C', '6'), Card('H', '4')],
                  [Card('C', '4'), Card('D', '4')]),
      ReadyCombinationType.THREE_OF_A_KIND),
     (Combination([Card('C', '9'), Card('D', 'K'), Card('S', '8'), Card('D', '6'), Card('S', 'J')],
                  [Card('H', '8'), Card('D', '8')]),
      ReadyCombinationType.THREE_OF_A_KIND),
     (Combination([Card('D', 'J'), Card('H', 'Q'), Card('D', 'K')],
                  [Card('S', 'A'), Card('C', 'T')]),
      ReadyCombinationType.STRAIGHT),
     (Combination([Card('C', '7'), Card('C', '5'), Card('D', '9'), Card('S', '6')],
                  [Card('D', '6'), Card('S', '8')]),
      ReadyCombinationType.STRAIGHT),
     (Combination([Card('C', '2'), Card('C', '5'), Card('D', '4'), Card('S', '6'), Card('S', 'J')],
                  [Card('D', '3'), Card('S', 'A')]),
      ReadyCombinationType.STRAIGHT),
     (Combination([Card('D', 'A'), Card('C', 'A'), Card('S', 'A')],
                  [Card('D', 'K'), Card('H', 'K')]),
      ReadyCombinationType.FULL_HOUSE),
     (Combination([Card('D', 'A'), Card('C', 'K'), Card('S', 'Q')],
                  [Card('D', 'A'), Card('H', 'A')]),
      ReadyCombinationType.THREE_OF_A_KIND),
     (Combination([Card('C', 'Q'), Card('C', 'Q'), Card('S', '8'), Card('S', '5')],
                  [Card('D', 'Q'), Card('H', '8')]),
      ReadyCombinationType.FULL_HOUSE),
     (Combination([Card('D', 'A'), Card('C', 'A'), Card('S', 'A'), Card('S', '2'), Card('C', '7')],
                  [Card('D', 'K'), Card('H', 'K')]),
      ReadyCombinationType.FULL_HOUSE),
     (Combination([Card('H', 'A'), Card('H', 'Q'), Card('H', 'T')],
                  [Card('H', '2'), Card('H', '3')]),
      ReadyCombinationType.FLUSH),
     (Combination([Card('C', '3'), Card('S', '8'), Card('C', '2'), Card('C', '7')],
                  [Card('C', '6'), Card('C', '9')]),
      ReadyCombinationType.FLUSH),
     (Combination([Card('H', '6'), Card('H', '8'), Card('H', '4'), Card('D', 'Q'), Card('C', 'A')],
                  [Card('H', '2'), Card('H', 'K')]),
      ReadyCombinationType.FLUSH),
     (Combination([Card('H', '6'), Card('H', 'T'), Card('H', '9')],
                  [Card('H', '7'), Card('H', '8')]),
      ReadyCombinationType.STRAIGHT_FLUSH),
     (Combination([Card('C', '4'), Card('C', '5'), Card('C', '7'), Card('H', 'Q')],
                  [Card('C', '8'), Card('C', '6')]),
      ReadyCombinationType.STRAIGHT_FLUSH),
     (Combination([Card('D', '2'), Card('D', 'A'), Card('D', '3'), Card('C', 'T'), Card('D', '6')],
                  [Card('D', '5'), Card('D', '4')]),
      ReadyCombinationType.STRAIGHT_FLUSH),
     (Combination([Card('S', '8'), Card('D', '6'), Card('C', '4')],
                  [Card('H', 'A'), Card('H', '2')]),
      ReadyCombinationType.HIGH_CARD),
     (Combination([Card('S', '3'), Card('H', 'T'), Card('S', '8'), Card('S', '4')],
                  [Card('S', 'Q'), Card('H', '2')]),
      ReadyCombinationType.HIGH_CARD),
     (Combination([Card('D', '3'), Card('S', '2'), Card('D', '7'), Card('C', '6'), Card('H', 'J')],
                  [Card('C', 'A'), Card('D', 'K')]),
      ReadyCombinationType.HIGH_CARD),
     (Combination([Card('C', '4'), Card('D', '4'), Card('C', 'J')],
                  [Card('H', '4'), Card('S', '4')]),
      ReadyCombinationType.FOUR_OF_A_KIND),
     (Combination([], [Card('H', '4'), Card('S', '4')]), ReadyCombinationType.ONE_PAIR),
     (Combination([], [Card('H', '4'), Card('S', '5')]), ReadyCombinationType.AIR),
     (Combination([], [Card('H', 'A'), Card('C', 'T')]), ReadyCombinationType.AIR),
     (Combination([], [Card('S', '2'), Card('D', 'K')]), ReadyCombinationType.AIR),
     (Combination([Card('D', 'A'), Card('S', '5'), Card('C', 'A'), Card('D', '4')],
                  [Card('H', 'A'), Card('S', 'A')]),
      ReadyCombinationType.FOUR_OF_A_KIND),
     (Combination([Card('D', 'K'), Card('S', '5'), Card('C', '4'), Card('D', '4'), Card('C', 'J')],
                  [Card('H', '4'), Card('S', '4')]),
      ReadyCombinationType.FOUR_OF_A_KIND),
     (Combination([Card('D', '3'), Card('C', 'A'), Card('H', '4')],
                  [Card('H', 'T'), Card('D', '2')]),
      ReadyCombinationType.AIR),
     (Combination([Card('C', '4'), Card('H', 'Q'), Card('D', 'K'), Card('S', '3')],
                  [Card('D', '6'), Card('D', '8')]),
      ReadyCombinationType.AIR),
     (Combination([Card('H', '2'), Card('H', '8'), Card('H', '4'), Card('C', 'K'), Card('D', '3')],
                  [Card('C', 'J'), Card('C', '5')]),
      ReadyCombinationType.AIR)
     ]
)
def test_ready_combination_type(test_input, expected):
    assert test_input.ready_combination() == expected


@pytest.mark.parametrize(
    "test_input, expected_output",
    [(Combination([Card('H', '3'), Card('H', 'K'), Card('S', '7')],
                  [Card('H', 'A'), Card('H', '9')]),
      DrawCombinationType.FLUSH_DRAW),
     (Combination([Card('C', '4'), Card('C', '5'), Card('C', '7'), Card('H', 'Q')],
                  [Card('C', '8'), Card('D', '6')]),
      DrawCombinationType.FLUSH_DRAW),  # на руках 1 карта, на борде 3 такойже масти
     (Combination([Card('C', '4'), Card('H', '5'), Card('C', '7'), Card('H', 'Q')],
                  [Card('C', '3'), Card('C', 'A')]),
      DrawCombinationType.FLUSH_DRAW),
     (Combination([Card('S', '4'), Card('S', '5'), Card('C', '7'), Card('H', 'Q'), Card('D', '2')],
                  [Card('S', '3'), Card('S', 'A')]),
      DrawCombinationType.FLUSH_DRAW),
     (Combination([Card('D', 'J'), Card('H', 'Q'), Card('D', 'K')],
                  [Card('S', '8'), Card('C', 'T')]),
      DrawCombinationType.DOUBLE_STRAIGHT_DRAW),
     (Combination([Card('C', '7'), Card('C', '4'), Card('D', '9'), Card('S', '2')],
                  [Card('D', '6'), Card('S', '8')]),
      DrawCombinationType.DOUBLE_STRAIGHT_DRAW),
     (Combination([Card('C', '2'), Card('C', '5'), Card('D', '4'), Card('S', '6'), Card('S', 'J')],
                  [Card('D', '3'), Card('S', 'T')]),
      DrawCombinationType.DOUBLE_STRAIGHT_DRAW),
     (Combination([Card('C', '2'), Card('C', '4'), Card('D', 'T'), Card('S', 'J')],
                  [Card('D', '3'), Card('S', 'A')]),
      DrawCombinationType.DOUBLE_STRAIGHT_DRAW),  # туз слева
     (Combination([Card('C', 'Q'), Card('C', 'J'), Card('D', 'T'), Card('S', '2')],
                  [Card('D', 'K'), Card('S', 'A')]),
      DrawCombinationType.DOUBLE_STRAIGHT_DRAW),  # туз справа
     (Combination([Card('D', 'J'), Card('H', 'Q'), Card('D', '3')],
                  [Card('S', '8'), Card('C', '9')]),
      DrawCombinationType.GUTSHOT),
     (Combination([Card('C', '7'), Card('C', 'A'), Card('D', '9'), Card('S', '3')],
                  [Card('D', 'T'), Card('S', 'J')]),
      DrawCombinationType.GUTSHOT), # туз справа
     (Combination([Card('C', '7'), Card('C', 'T'), Card('D', 'A'), Card('S', 'J'), Card('S', '2')],
                  [Card('D', '8'), Card('S', '2')]),
      DrawCombinationType.GUTSHOT),
     (Combination([Card('C', 'A'), Card('C', '3'), Card('D', '5')],
                  [Card('D', '2'), Card('S', '8')]),
      DrawCombinationType.GUTSHOT), # туз слева
     (Combination([Card('S', '8'), Card('D', '9'), Card('S', '2')],
                  [Card('H', 'T'), Card('C', 'K')]),
      DrawCombinationType.BACKDOOR_STRAIGHT),
     (Combination([Card('S', '8'), Card('D', '9'), Card('H', '3')],
                  [Card('C', 'Q'), Card('C', 'K')]),
      DrawCombinationType.BACKDOOR_STRAIGHT),
     (Combination([Card('S', '8'), Card('D', 'T'), Card('D', '3')],
                  [Card('C', 'Q'), Card('C', 'K')]),
      DrawCombinationType.BACKDOOR_STRAIGHT),
     (Combination([Card('S', '8'), Card('D', 'T'), Card('D', '3')],
                  [Card('C', 'Q'), Card('C', 'K')]),
      DrawCombinationType.BACKDOOR_STRAIGHT),  # туз слева
     (Combination([Card('H', '3'), Card('D', 'A'), Card('H', 'K')],
                  [Card('S', '2'), Card('S', '8')]),
      DrawCombinationType.BACKDOOR_STRAIGHT),  # туз справа
     (Combination([Card('C', 'A'), Card('C', '9'), Card('S', '2')],
                  [Card('D', 'Q'), Card('C', 'Q')]),
      DrawCombinationType.BACKDOOR_FLUSH),
     (Combination([Card('S', '2'), Card('S', 'Q'), Card('D', 'A')],
                  [Card('S', '8'), Card('H', '7')]),
      DrawCombinationType.BACKDOOR_FLUSH),
     (Combination([Card('S', '4'), Card('S', '6'), Card('C', 'J')],
                  [Card('S', 'A'), Card('H', 'Q')]),
      DrawCombinationType.BACKDOOR_FLUSH),
     (Combination([Card('S', 'J'), Card('D', '7'), Card('H', '3')],
                  [Card('D', 'Q'), Card('D', 'K')]),
      DrawCombinationType.DOUBLE_BACKDOOR),
     (Combination([Card('C', '8'), Card('C', 'T'), Card('H', '4')],
                  [Card('S', '6'), Card('C', '8')]),
      DrawCombinationType.DOUBLE_BACKDOOR),
     (Combination([Card('D', 'K'), Card('C', 'T'), Card('D', '6')],
                  [Card('C', 'Q'), Card('C', '8')]),
      DrawCombinationType.DOUBLE_BACKDOOR),
     (Combination([Card('S', '4'), Card('S', '9'), Card('C', '2')],
                  [Card('C', 'K'), Card('S', '5')]),
      DrawCombinationType.DOUBLE_BACKDOOR),
     (Combination([Card('C', '9'), Card('H', '9'), Card('D', '9')],
                  [Card('D', '2'), Card('C', '5')]),
      DrawCombinationType.NO_DRAW_COMBINATIONS),
     (Combination([Card('C', 'Q'), Card('C', 'Q'), Card('S', '8'), Card('S', '5')],
                  [Card('D', 'Q'), Card('H', '8')]),
      DrawCombinationType.NO_DRAW_COMBINATIONS),
     (Combination([Card('D', '3'), Card('S', '2'), Card('D', '7'), Card('C', '6'), Card('H', 'J')],
                  [Card('C', 'A'), Card('D', 'K')]),
      DrawCombinationType.NO_DRAW_COMBINATIONS),
     (Combination([Card('C', '2'), Card('C', 'T'), Card('C', '9')],
                  [Card('D', '2'), Card('H', '5')]),
      DrawCombinationType.NO_DRAW_COMBINATIONS),  # анти-тест  бэкдор флеш дро
     (Combination([Card('H', '2'), Card('D', '3'), Card('H', '4')],
                  [Card('S', 'T'), Card('S', '8')]),
      DrawCombinationType.NO_DRAW_COMBINATIONS)  # анти-тест бэкдор стрит дро
     ]

)
def test_draw_combination_type(test_input, expected_output):
    assert test_input.draw_combination() == expected_output
